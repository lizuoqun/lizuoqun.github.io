import{_ as t,c as e,o as r,aO as i}from"./chunks/framework.44iyj4TK.js";const m=JSON.parse('{"title":"rabbitMQ","description":"","frontmatter":{},"headers":[],"relativePath":"backEnd/java/rabbitmq.md","filePath":"backEnd/java/rabbitmq.md","lastUpdated":1749030379000}'),l={name:"backEnd/java/rabbitmq.md"};function o(b,a,n,d,s,_){return r(),e("div",null,a[0]||(a[0]=[i('<h1 id="rabbitmq" tabindex="-1">rabbitMQ <a class="header-anchor" href="#rabbitmq" aria-label="Permalink to &quot;rabbitMQ&quot;">​</a></h1><h2 id="如何保证消息的顺序性" tabindex="-1">如何保证消息的顺序性 <a class="header-anchor" href="#如何保证消息的顺序性" aria-label="Permalink to &quot;如何保证消息的顺序性&quot;">​</a></h2><p>导致消息顺序错乱的情况</p><ul><li>一个队列对应多个消费者，消费者消费消息的速度有差异导致</li><li>一个队列对应一个消费者，消费者开了多线程也会导致</li></ul><p>解决方案</p><ul><li>一个队列对应一个消费者，</li><li>一个队列对应一个消费者，在消费者当中用内存队列排队，分发给底层不同的worker处理</li></ul>',6)]))}const p=t(l,[["render",o]]);export{m as __pageData,p as default};
