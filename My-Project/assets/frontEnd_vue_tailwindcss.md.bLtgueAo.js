import{_ as i,c as e,o as l,aP as t}from"./chunks/framework.BJOOWd-7.js";const _=JSON.parse('{"title":"Tailwind Css","description":"","frontmatter":{},"headers":[],"relativePath":"frontEnd/vue/tailwindcss.md","filePath":"frontEnd/vue/tailwindcss.md","lastUpdated":1759991456000}'),d={name:"frontEnd/vue/tailwindcss.md"};function o(n,a,r,s,c,h){return l(),e("div",null,a[0]||(a[0]=[t('<h1 id="tailwind-css" tabindex="-1">Tailwind Css <a class="header-anchor" href="#tailwind-css" aria-label="Permalink to &quot;Tailwind Css&quot;">​</a></h1><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p><a href="https://tailwindcss.com/docs/installation/using-vite" target="_blank" rel="noreferrer">using vite</a></p><h2 id="项目中为何选择" tabindex="-1">项目中为何选择 <a class="header-anchor" href="#项目中为何选择" aria-label="Permalink to &quot;项目中为何选择&quot;">​</a></h2><ul><li>开发效率高</li><li>维护性强</li><li>响应式设计友好</li><li>与现代前端框架兼容性好</li></ul><h2 id="如何解决样式冲突" tabindex="-1">如何解决样式冲突 <a class="header-anchor" href="#如何解决样式冲突" aria-label="Permalink to &quot;如何解决样式冲突&quot;">​</a></h2><ul><li>类名优先级：后者覆盖前者</li><li>配置文件定制</li><li>命名空间：<code>-tw-bg-red-500</code></li></ul><h3 id="响应式断点底层实现" tabindex="-1">响应式断点底层实现 <a class="header-anchor" href="#响应式断点底层实现" aria-label="Permalink to &quot;响应式断点底层实现&quot;">​</a></h3><ul><li>为每个带前缀的类生成<code>@media (min-width: ...)</code>包裹的 CSS 规则</li><li>JIT 模式动态生成 <ul><li>扫描你的 HTML/JSX/TSX 文件，找出所有使用的类名</li><li>动态生成对应的 CSS，包括响应式变体</li><li>只生成你用到的类，文件体积极小（性能优化）</li></ul></li><li>断点定义：在 <code>tailwind.config.js</code> 中配置 <code>screens</code></li><li>类名处理：<code>:</code>被转义为<code>\\:</code>，避免与伪类冲突</li></ul>',9)]))}const f=i(d,[["render",o]]);export{_ as __pageData,f as default};
