import{_ as e,c as d,o as a,aP as i}from"./chunks/framework.BJOOWd-7.js";const p=JSON.parse('{"title":"工程化？","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"frontEnd/engineering/index.md","filePath":"frontEnd/engineering/index.md","lastUpdated":1760423085000}'),r={name:"frontEnd/engineering/index.md"};function n(l,t,o,h,s,u){return a(),d("div",null,t[0]||(t[0]=[i('<h1 id="工程化" tabindex="-1">工程化？ <a class="header-anchor" href="#工程化" aria-label="Permalink to &quot;工程化？&quot;">​</a></h1><p>当项目规模变大时，就会出现很多问题，这就是工程化要解决的问题。</p><h2 id="出现的问题" tabindex="-1">出现的问题 <a class="header-anchor" href="#出现的问题" aria-label="Permalink to &quot;出现的问题&quot;">​</a></h2><h3 id="全局污染问题" tabindex="-1">全局污染问题 <a class="header-anchor" href="#全局污染问题" aria-label="Permalink to &quot;全局污染问题&quot;">​</a></h3><ul><li>随着JS文件数量和代码量的增加</li><li>全局变量同名的几率将会陡然上升</li><li>开发人员不得不耗费大量的精力来规避</li></ul><h3 id="依赖混入问题" tabindex="-1">依赖混入问题 <a class="header-anchor" href="#依赖混入问题" aria-label="Permalink to &quot;依赖混入问题&quot;">​</a></h3><p>在js中先引入哪个模块，后引入哪个模块</p><h2 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-label="Permalink to &quot;模块化&quot;">​</a></h2><p>用来解决全局污染和依赖混入问题</p><ul><li>官方标准：ES Module</li><li>社区标准：CommonJS、AMD、CMD、UMD</li></ul><table tabindex="0"><thead><tr><th>特性</th><th>AMD</th><th>CMD</th><th>UMD</th></tr></thead><tbody><tr><td>全称</td><td>Asynchronous Module Definition</td><td>Common Module Definition</td><td>Universal Module Definition</td></tr><tr><td>依赖声明</td><td>依赖前置（开头声明）</td><td>依赖就近（用时 require）</td><td>兼容多种方式</td></tr><tr><td>加载方式</td><td>异步</td><td>异步</td><td>根据环境决定（异步或同步）</td></tr><tr><td>主要用途</td><td>浏览器模块化</td><td>浏览器模块化（已式微）</td><td>通用库，多环境兼容</td></tr><tr><td>代表工具</td><td>RequireJS</td><td>Sea.js</td><td>无特定工具，是一种写法模式</td></tr><tr><td>是否主流</td><td>曾主流，现逐渐被 ES Module 取代</td><td>已不常用</td><td>仍广泛用于第三方库兼容</td></tr></tbody></table><h2 id="包管理" tabindex="-1">包管理 <a class="header-anchor" href="#包管理" aria-label="Permalink to &quot;包管理&quot;">​</a></h2><p>模块化出现后，出现了大量的第三方库，这么多第三方库，如何管理？</p><ul><li>npm</li><li>yarn</li><li>pnpm</li></ul>',14)]))}const m=e(r,[["render",n]]);export{p as __pageData,m as default};
