import{_ as a,C as u,c as f,o as m,aP as e,j as i,G as o,a as t,w as r}from"./chunks/framework.BJOOWd-7.js";const D=JSON.parse('{"title":"04747 Java语言程序设计 ☑️","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"exam/04747.md","filePath":"exam/04747.md","lastUpdated":1755496743000}'),F={name:"exam/04747.md"};function p(A,l,P,T,y,b){const n=u("font"),s=u("MarkLottie"),d=u("BackTop");return m(),f("div",null,[l[71]||(l[71]=e("",6)),i("ul",null,[i("li",null,[l[1]||(l[1]=t("包装类不能被实例化的 ")),o(n,{style:{color:"#DF2A3F"}},{default:r(()=>l[0]||(l[0]=[t("Void")])),_:1,__:[0]}),l[2]||(l[2]=t("（不能通过new 创建）"))]),l[9]||(l[9]=i("li",null,"调用方法使用值传递的方式，形参和实参指向同一地址",-1)),l[10]||(l[10]=i("li",null,"一个类中允许多个方法使用同一个方法名：方法重载",-1)),l[11]||(l[11]=i("li",null,"类方法不能直接引用实例变量",-1)),l[12]||(l[12]=i("li",null,"java 的派生机制，子类和父类之间是 is a 的关系，而不是 has a 的关系",-1)),l[13]||(l[13]=i("li",null,"调用方法使用值传递将基本数据类型的实参传给形参是将实参的值复制给形参",-1)),l[14]||(l[14]=i("li",null,"直接定义在类的变量：实例变量、定义在类并且通过 static 修饰是类变量、方法内的变量都是局部变量",-1)),i("li",null,[l[4]||(l[4]=t("多态是父类定义的属性和方法被子类继承之后可以具有不同的数据类型或表现出不同的行为。")),o(n,{style:{color:"#DF2A3F"}},{default:r(()=>l[3]||(l[3]=[t(" 指对象的状态随运行时给定的参数不同而不同（x）")])),_:1,__:[3]})]),i("li",null,[l[6]||(l[6]=t("面向对象语言概念：抽象、对象、消息、类、继承、多态、动态联编。")),o(n,{style:{color:"#DF2A3F"}},{default:r(()=>l[5]||(l[5]=[t("函数、模块不属于")])),_:1,__:[5]})]),i("li",null,[l[8]||(l[8]=t("子类调用父类构造的方法：")),o(n,{style:{color:"#DF2A3F"}},{default:r(()=>l[7]||(l[7]=[t("super和创建子类对象会自动调用父类构造")])),_:1,__:[7]})])]),l[72]||(l[72]=i("h2",{id:"集合",tabindex:"-1"},[t("集合 "),i("a",{class:"header-anchor",href:"#集合","aria-label":'Permalink to "集合"'},"​")],-1)),i("ul",null,[i("li",null,[l[16]||(l[16]=t("Vector类实例当中存的是")),o(n,{style:{color:"#DF2A3F"}},{default:r(()=>l[15]||(l[15]=[t("对象")])),_:1,__:[15]}),l[17]||(l[17]=t("类型"))])]),l[73]||(l[73]=i("h2",{id:"io流",tabindex:"-1"},[t("IO流 "),i("a",{class:"header-anchor",href:"#io流","aria-label":'Permalink to "IO流"'},"​")],-1)),i("ul",null,[i("li",null,[l[19]||(l[19]=t("File对象通过")),o(n,{style:{color:"#DF2A3F"}},{default:r(()=>l[18]||(l[18]=[t("length()")])),_:1,__:[18]}),l[20]||(l[20]=t("方法获取文件长度"))]),l[26]||(l[26]=i("li",null,"File 对象只能用来命名文件、查询文件属性和处理目录，不提供读写操作",-1)),l[27]||(l[27]=i("li",null,"程序需按行输入输出文件的字符流：需要使用缓冲式 BufferedReader、BufferedWriter",-1)),l[28]||(l[28]=i("li",null,"大多数采用缓冲式输入数据文件的主要目的：用 readLine()方法按行输入字符",-1)),i("li",null,[l[22]||(l[22]=t("抽象类 Reader、Writer 处理的是")),o(n,{style:{color:"#DF2A3F"}},{default:r(()=>l[21]||(l[21]=[t("字符流")])),_:1,__:[21]}),l[23]||(l[23]=t("（带了 Stream 的才是字节流）"))]),l[29]||(l[29]=i("li",null,[t("new File()再通过 "),i("code",null,"getpath"),t(" 得到的路径 \\my\\git\\a.java（反斜杠、不带磁盘名称）")],-1)),l[30]||(l[30]=i("li",null,"不能用于文件随机访问 readInteger（readChar、readLong、writeChars）",-1)),l[31]||(l[31]=i("li",null,"int read(byte []b, int off, int len)的返回值是读取的字节数",-1)),l[32]||(l[32]=i("li",null,"一次从文件中读一行数据使用 BufferedReader 的 readLine()方法",-1)),i("li",null,[l[25]||(l[25]=t("IO 包的四个基本抽象类：")),o(n,{style:{color:"#DF2A3F"}},{default:r(()=>l[24]||(l[24]=[t("InputStream、OutputStream、Reader、Writer")])),_:1,__:[24]})])]),l[74]||(l[74]=i("h2",{id:"异常处理",tabindex:"-1"},[t("异常处理 "),i("a",{class:"header-anchor",href:"#异常处理","aria-label":'Permalink to "异常处理"'},"​")],-1)),i("ul",null,[i("li",null,[l[34]||(l[34]=t("在java当中必须处理的异常 ")),o(n,{style:{color:"#DF2A3F"}},{default:r(()=>l[33]||(l[33]=[t("受检异常")])),_:1,__:[33]})]),l[35]||(l[35]=i("li",null,"受检异常包括：IO、SQL、ClassNotFound、FileNotFound、NoSuchMethod",-1)),l[36]||(l[36]=i("li",null,"运行时异常：NullPoint、ClassCase（类强制转换）、IndexOutOfBounds、Arithmetic（数字运算）",-1))]),l[75]||(l[75]=i("h2",{id:"多线程",tabindex:"-1"},[t("多线程 "),i("a",{class:"header-anchor",href:"#多线程","aria-label":'Permalink to "多线程"'},"​")],-1)),i("ul",null,[i("li",null,[l[38]||(l[38]=t("由挂起状态->可运行状态的方法 ")),o(n,{style:{color:"#DF2A3F"}},{default:r(()=>l[37]||(l[37]=[t("notify()")])),_:1,__:[37]})]),l[47]||(l[47]=i("li",null,"从阻塞状态->就绪状态 ：自动恢复 、resume()、notify 或 notifyAll 通知恢复",-1)),i("li",null,[l[40]||(l[40]=t("强制终止线程的方法")),o(n,{style:{color:"#DF2A3F"}},{default:r(()=>l[39]||(l[39]=[t(" yield()")])),_:1,__:[39]})]),i("li",null,[l[43]||(l[43]=t("对象互斥锁 是对")),o(n,{style:{color:"#DF2A3F"}},{default:r(()=>l[41]||(l[41]=[t("共享数据")])),_:1,__:[41]}),l[44]||(l[44]=t("的操作 ")),o(n,{style:{color:"#DF2A3F"}},{default:r(()=>l[42]||(l[42]=[t("synchronized")])),_:1,__:[42]})]),i("li",null,[l[46]||(l[46]=t("线程优先级级别最低的数字 ")),o(n,{style:{color:"#DF2A3F"}},{default:r(()=>l[45]||(l[45]=[t("1")])),_:1,__:[45]})]),l[48]||(l[48]=i("li",null,[t("Thread 中 3 个线程优先级静态量 "),i("code",null,"NORM_PRIOPLTY"),t("、 "),i("code",null,"MAX_PRIOPLTY"),t("、 "),i("code",null,"MIN_PRIOPLTY"),t("（普通、最大、最小）")],-1)),l[49]||(l[49]=i("li",null,"Runnable：先实现接口。在类内实现run()方法；并在类内声明线程对象，在init()，方法或start()方法中创建新线程，并在start() 方法中启动新线程",-1)),l[50]||(l[50]=i("li",null,"线程死亡的原因：执行完毕、遇到异常",-1)),l[51]||(l[51]=i("li",null,"线程的组成部分（执行的代码、处理的数据、虚拟 CPU）不属于（入口和出口）",-1))]),l[76]||(l[76]=e("",5)),i("ul",null,[i("li",null,[l[53]||(l[53]=t("JComboBox 构造：")),o(n,{style:{color:"#DF2A3F"}},{default:r(()=>l[52]||(l[52]=[t("无参构造、有参构造")])),_:1,__:[52]}),l[54]||(l[54]=t("（Object [] items）创建可选组合框"))]),i("li",null,[l[56]||(l[56]=t("创建自定义图形，由 JPanel 派生一个新类，重写父类 ")),o(n,{style:{color:"#DF2A3F"}},{default:r(()=>l[55]||(l[55]=[t("paintComponent()")])),_:1,__:[55]}),l[57]||(l[57]=t(" 方法"))]),l[65]||(l[65]=e("",12)),i("li",null,[l[59]||(l[59]=t("MouseListener 接口只能处理的鼠标事件：按下、释放、点击、进入、退出（")),o(n,{style:{color:"#DF2A3F"}},{default:r(()=>l[58]||(l[58]=[t("没有移动事件")])),_:1,__:[58]}),l[60]||(l[60]=t("） ")),l[61]||(l[61]=i("ul",null,[i("li",null,"mousePressed"),i("li",null,"mouseReleased"),i("li",null,"mouseEntered"),i("li",null,"mouseExited"),i("li",null,"mouseClicked")],-1))]),l[66]||(l[66]=i("li",null,[t("顶层容器："),i("code",null,"JFream"),t("、JApplet、JDialog、JWindow")],-1)),l[67]||(l[67]=i("li",null,"文字字型三要素：字体、风格、字号",-1)),l[68]||(l[68]=i("li",null,"创建文字的构造 Font(string name, int style, int size) 宋体 加粗 12",-1)),l[69]||(l[69]=i("li",null,"java.awt.event 包包含：源对象、监视器对象、事件对象",-1)),i("li",null,[l[63]||(l[63]=t("JFileChoose 来实现打开和保存文件对话框，用户通过文件对话框不能")),o(n,{style:{color:"#DF2A3F"}},{default:r(()=>l[62]||(l[62]=[t("获取文件内容")])),_:1,__:[62]}),l[64]||(l[64]=i("ul",null,[i("li",null,"getSelectedFile 获取文件对象（顺序就是这三个的排序，先获得文件对象）"),i("li",null,"getName 获取文件名称"),i("li",null,"getPath 路径")],-1))]),l[70]||(l[70]=e("",3))]),o(s,{path:"/My-Project/lottie/MobileAppDevelopment.json"}),o(d)])}const g=a(F,[["render",p]]);export{D as __pageData,g as default};
