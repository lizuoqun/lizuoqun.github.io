import{_ as a,c as e,o as n,aS as o}from"./chunks/framework.nU6VANjp.js";const g=JSON.parse('{"title":"Spring框架","description":"","frontmatter":{},"headers":[],"relativePath":"backEnd/java/spring.md","filePath":"backEnd/java/spring.md","lastUpdated":1749030379000}'),r={name:"backEnd/java/spring.md"},t=o('<h1 id="spring框架" tabindex="-1">Spring框架 <a class="header-anchor" href="#spring框架" aria-label="Permalink to &quot;Spring框架&quot;">​</a></h1><h2 id="ioc-控制反转-inversion-of-control" tabindex="-1">IOC 控制反转 Inversion of Control <a class="header-anchor" href="#ioc-控制反转-inversion-of-control" aria-label="Permalink to &quot;IOC 控制反转 Inversion of Control&quot;">​</a></h2><p>对象的实例不再由调用者来创建，而是由Spring容器来创建，Spring容器会负责控制程序之间的关系， 而不是由调用者的程序代码直接控制。 这样，控制权由应用代码转移到了Spring容器，控制权发生了反转，这就是控制反转。</p><h2 id="di-依赖注入-dependency-injection" tabindex="-1">DI 依赖注入 Dependency Injection <a class="header-anchor" href="#di-依赖注入-dependency-injection" aria-label="Permalink to &quot;DI 依赖注入 Dependency Injection&quot;">​</a></h2><h2 id="aop" tabindex="-1">AOP <a class="header-anchor" href="#aop" aria-label="Permalink to &quot;AOP&quot;">​</a></h2>',5),i=[t];function c(s,d,p,l,_,h){return n(),e("div",null,i)}const m=a(r,[["render",c]]);export{g as __pageData,m as default};
