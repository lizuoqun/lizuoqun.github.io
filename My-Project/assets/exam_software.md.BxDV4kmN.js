import{_ as n,C as i,c as r,o as d,aP as l,G as t}from"./chunks/framework.BJOOWd-7.js";const _=JSON.parse('{"title":"软考——高级系统架构分析师","description":"","frontmatter":{},"headers":[],"relativePath":"exam/software.md","filePath":"exam/software.md","lastUpdated":1756280014000}'),m={name:"exam/software.md"};function o(p,a,h,c,u,b){const e=i("MarkTitle"),s=i("el-divider");return d(),r("div",null,[a[0]||(a[0]=l('<h1 id="软考——高级系统架构分析师" tabindex="-1">软考——高级系统架构分析师 <a class="header-anchor" href="#软考——高级系统架构分析师" aria-label="Permalink to &quot;软考——高级系统架构分析师&quot;">​</a></h1><h2 id="体系结构" tabindex="-1">体系结构 <a class="header-anchor" href="#体系结构" aria-label="Permalink to &quot;体系结构&quot;">​</a></h2><h3 id="流水线" tabindex="-1">流水线 <a class="header-anchor" href="#流水线" aria-label="Permalink to &quot;流水线&quot;">​</a></h3><p>在计算机流水线中，若一条指令分为取指、译码、执行、访存、写回5个阶段，每个阶段耗时1ns，不考虑冲突，则执行10条指令所需时间为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>=</mo><mo stretchy="false">(</mo><mn>10</mn><mo>+</mo><mn>5</mn><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mn>1</mn><mo>=</mo><mn>14</mn><mi>n</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">T=( 10+5-1)*1=14ns</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">4</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span></span></span></span></p><p>单条指令耗时：5阶段 × 1ns = 5ns</p><p>流水线执行 n 条指令总时间公式： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>=</mo><mo stretchy="false">(</mo><mi>k</mi><mo>+</mo><mi>n</mi><mtext>−</mtext><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">T=(k+n−1)×Δt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span><span class="mord mathnormal">t</span></span></span></span>，k是阶段数，Δt是阶段耗时，n是指令数</p><h2 id="数据库" tabindex="-1">数据库 <a class="header-anchor" href="#数据库" aria-label="Permalink to &quot;数据库&quot;">​</a></h2><p>事务隔离级别中，能够防止不可重复读，但不能防止幻读的是：<strong><em>Repeatable Read</em></strong></p><table tabindex="0"><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>说明</th></tr></thead><tbody><tr><td>Read Uncommitted<br>（读未提交）</td><td>✅</td><td>✅</td><td>✅</td><td>最低级别，性能最高<br>但数据一致性最差</td></tr><tr><td>Read Committed<br>（读已提交）</td><td>❌</td><td>✅</td><td>✅</td><td>大多数数据库默认级别<br>（如 Oracle）</td></tr><tr><td>Repeatable Read<br>（可重复读）</td><td>❌</td><td>❌</td><td>✅标准SQL<br>❌MySQL、InnoDB</td><td>MySQL 默认级别</td></tr><tr><td>Serializable<br>（串行化）</td><td>❌</td><td>❌</td><td>❌</td><td>最高级别，事务串行执行<br>性能最差</td></tr></tbody></table><h2 id="网络" tabindex="-1">网络 <a class="header-anchor" href="#网络" aria-label="Permalink to &quot;网络&quot;">​</a></h2><p>HTTPS协议中，用于加密传输数据的是：<strong><em>AES</em></strong></p><ul><li>非对称加密（如 RSA、ECDHE）→ 用于安全协商会话密钥</li><li>对称加密（如 AES）→ 用于加密实际传输的数据</li><li>哈希算法（如 SHA-256）→ 用于完整性校验</li><li>DH/ECDH → 密钥交换协议</li></ul><h2 id="架构风格" tabindex="-1">架构风格 <a class="header-anchor" href="#架构风格" aria-label="Permalink to &quot;架构风格&quot;">​</a></h2><h2 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-label="Permalink to &quot;设计模式&quot;">​</a></h2><h2 id="网络安全" tabindex="-1">网络安全 <a class="header-anchor" href="#网络安全" aria-label="Permalink to &quot;网络安全&quot;">​</a></h2><p>下列哪种技术可用于防止CSRF攻击？<strong><em>Anti-CSRF Token</em></strong></p><ul><li>HTTPS：防窃听，不防伪造请求</li><li>HttpOnly Cookie：防 XSS 读取 Cookie，不防 CSRF</li><li>Anti-CSRF Token：服务器生成 token，前端提交，验证来源</li><li>CORS：控制跨域资源访问，不是防 CSRF 的主要手段</li></ul><p>网络攻击类型</p><table tabindex="0"><thead><tr><th>类型</th><th>特点</th><th>示例</th></tr></thead><tbody><tr><td>被动攻击</td><td>不修改数据，仅监听</td><td>窃听、流量分析</td></tr><tr><td>主动攻击</td><td>修改、伪造、中断数据</td><td>DoS（耗尽资源）、MITM（篡改通信）、重放、篡改</td></tr></tbody></table><h2 id="云计算" tabindex="-1">云计算 <a class="header-anchor" href="#云计算" aria-label="Permalink to &quot;云计算&quot;">​</a></h2><h2 id="软件工程" tabindex="-1">软件工程 <a class="header-anchor" href="#软件工程" aria-label="Permalink to &quot;软件工程&quot;">​</a></h2><h2 id="操作系统" tabindex="-1">操作系统 <a class="header-anchor" href="#操作系统" aria-label="Permalink to &quot;操作系统&quot;">​</a></h2><p>下列调度算法中，可能导致饥饿现象的是 <strong><em>SJF</em></strong></p><ul><li>FCFS：先到先服务，不会饿死</li><li>RR：时间片轮转，公平</li><li>SJF：长作业可能一直被短作业插队</li><li>多级反馈队列：长任务可能被降级，但通常有老化机制防饿</li></ul><h2 id="系统性能" tabindex="-1">系统性能 <a class="header-anchor" href="#系统性能" aria-label="Permalink to &quot;系统性能&quot;">​</a></h2><p>某系统每秒处理1000个请求，平均响应时间为0.2秒，则其并发用户数约为：</p><ul><li>并发用户数=吞吐量×平均响应时间=1000×0.2=<strong>200</strong></li></ul><h2 id="新兴技术" tabindex="-1">新兴技术 <a class="header-anchor" href="#新兴技术" aria-label="Permalink to &quot;新兴技术&quot;">​</a></h2><p>在边缘计算（将数据处理从中心云下放到靠近数据源的边缘设备或边缘服务器）架构中，数据处理主要发生在：<strong><em>接近数据源的边缘节点</em></strong></p><ul><li>中心云数据中心：传统云计算</li><li>用户终端设备：端计算，资源有限</li><li>企业内网服务器：可能是私有云，不一定是边缘</li></ul><h2 id="法律法规" tabindex="-1">法律法规 <a class="header-anchor" href="#法律法规" aria-label="Permalink to &quot;法律法规&quot;">​</a></h2><p>根据《信息安全等级保护管理办法》，各级信息系统应当至少多久进行一次等级测评</p><ul><li>二级系统：建议两年一次</li><li><strong><em>三级系统</em></strong>：每年至少一次等级测评</li><li>四级系统：每半年一次</li></ul>',33)),t(e,{color:"text-red-500",weight:500}),a[1]||(a[1]=l('<h2 id="案例分析" tabindex="-1">案例分析 <a class="header-anchor" href="#案例分析" aria-label="Permalink to &quot;案例分析&quot;">​</a></h2><h3 id="单体架构" tabindex="-1">单体架构 <a class="header-anchor" href="#单体架构" aria-label="Permalink to &quot;单体架构&quot;">​</a></h3><blockquote><p>某电商平台计划重构其单体架构系统。当前系统存在以下问题：</p><ul><li>发布一次需停机2小时，影响用户购物</li><li>某个模块（如订单）性能瓶颈导致整体响应慢</li><li>团队协作困难，多人修改同一代码库易冲突</li></ul><p>公司考虑采用 SOA 或 微服务架构，请回答以下问题：</p><ul><li>请说明 SOA 与微服务架构的主要区别（至少3点）。（6分）</li><li>针对上述问题，你建议采用哪种架构？并说明理由。（4分）</li><li>若采用微服务，如何保障服务间的数据一致性？请给出两种方案。（5分）</li></ul></blockquote><table tabindex="0"><thead><tr><th>对比维度</th><th>SOA</th><th>微服务</th></tr></thead><tbody><tr><td>服务粒度</td><td>粗粒度<br>如订单服务、客户服务</td><td>细粒度<br>如订单创建服务、订单支付服务</td></tr><tr><td>通信方式</td><td>常用 ESB（企业服务总线）<br>中心化路由</td><td>去中心化<br>常用 REST API 或轻量级消息（如 Kafka）</td></tr><tr><td>数据管理</td><td>多服务共享数据库</td><td>每个服务拥有独立数据库，避免共享</td></tr><tr><td>部署方式</td><td>通常集中部署在 ESB 容器中</td><td>独立部署，可使用 Docker + Kubernetes</td></tr><tr><td>团队组织</td><td>职能型团队（前端、后端）</td><td>全栈型小团队（一个团队负责一个服务）</td></tr></tbody></table><p>建议采用微服务架构，理由如下：</p><ul><li>解决发布停机问题：各服务独立部署，局部更新无需整体停机，支持灰度发布和滚动升级。</li><li>解决性能瓶颈问题：可通过横向扩展（scale-out）对高负载服务（如订单）单独扩容，而不影响其他服务。</li><li>改善团队协作：每个服务由独立团队负责，代码库分离，降低冲突，提升开发效率。</li></ul><p>保障数据一致性</p><ul><li>最终一致性 + 消息队列</li><li>TCC（Try-Confirm-Cancel）模式 <ul><li>分布式事务补偿机制： <ul><li>Try：预留资源（如冻结库存）</li><li>Confirm：确认执行（扣减库存）</li><li>Cancel：取消操作（释放库存）</li></ul></li><li>适用于高一致性场景（如支付）</li></ul></li><li>Saga 模式</li><li>Seata 等分布式事务框架</li></ul>',8)),t(s),a[2]||(a[2]=l('<h3 id="数据库分库分表" tabindex="-1">数据库分库分表 <a class="header-anchor" href="#数据库分库分表" aria-label="Permalink to &quot;数据库分库分表&quot;">​</a></h3><blockquote><p>某电商平台原采用单体架构，数据库为 MySQL 单实例。随着业务增长，订单表（order_info）数据量已达 5000万条，主要问题如下：</p><ul><li>订单查询响应时间从 200ms 上升到 2s 以上（尤其是按用户查询）；</li><li>大促期间数据库 CPU 使用率持续超过 90%，出现连接池耗尽；</li><li>单表数据增长迅速，预计半年后将突破 1 亿条，影响备份与维护。</li></ul><p>公司决定对订单系统进行重构，采用 分库分表 方案提升性能和可扩展性。</p><ul><li>请说明水平分表与垂直分表的区别，并结合本案例说明应优先采用哪种方式？（6分）</li><li>若采用水平分库分表，请给出一种合理的分片键（Sharding Key） 设计方案，并说明理由。（5分）</li><li>分库分表后，可能会带来哪些新的技术挑战？请列出至少 3 项，并简要说明应对策略。（9分）</li></ul></blockquote><ol><li>本案例应优先采用水平分表，理由如下： <ul><li>问题根源是数据量过大（5000万+）导致查询慢和性能瓶颈，属于典型的大表问题；</li><li>订单表字段相对固定，无明显冷热列分离需求，不适合垂直拆分；</li><li>水平分表可显著降低单表数据量，提升查询性能和并发能力。</li><li>水平分表：将同一张表的行数据按某种规则（如用户ID取模）分布到多个物理表中，每张表结构相同，数据不同</li><li>垂直分表：将一张表的列拆分到多个表中，通常将热点字段与冷数据分离（如主表保留核心字段，扩展表存详情）</li></ul></li><li>建议以 user_id 为分片键，<strong>采用取模或一致性哈希策略</strong>。因用户查询是主要场景，可保证查询定位到单一分片，且数据分布均匀</li><li>以下这些技术挑战以及解决策略： <ul><li>跨库分页查询：可通过应用层合并结果，或使用ES辅助查询</li><li>分布式事务：采用TCC模式或可靠消息最终一致性</li><li>全局ID生成：使用雪花算法生成不重复的订单ID</li><li>运维复杂度上升：引入数据库中间件</li></ul></li></ol>',3)),t(s),a[3]||(a[3]=l('<h3 id="质量属性场景建模" tabindex="-1">质量属性场景建模 <a class="header-anchor" href="#质量属性场景建模" aria-label="Permalink to &quot;质量属性场景建模&quot;">​</a></h3><blockquote><p>某在线教育平台计划升级其直播系统，当前系统在高并发场景下存在以下问题：</p><ul><li>大型公开课直播时，用户进入直播间延迟超过10秒</li><li>网络波动时，视频卡顿、音画不同步现象严重</li><li>系统日志显示，服务器CPU使用率经常达到100%，部分请求超时</li><li>运维反馈，扩容一台服务器需手动配置2小时，无法快速响应流量高峰</li></ul><p>平台希望新架构能支持10万级并发用户，并提升系统稳定性。</p><ul><li>请指出上述描述中涉及的4个质量属性，并分别对应到具体问题（8分）</li><li>针对用户进入直播间延迟高这一问题，请提出两种可行的架构优化方案，并简要说明原理。（6分）</li><li>扩容需手动配置2小时反映了哪个质量属性不足？请说明如何通过DevOps实践改进该问题。（6分）</li></ul></blockquote><ol><li>涉及的质量属性包括： <ul><li>性能：用户进入延迟高、CPU满载</li><li>可用性：网络波动时视频卡顿</li><li>可修改性：扩容需手动配置，变更成本高</li><li>可伸缩性：无法快速应对流量高峰</li></ul></li><li>优化方案： <ul><li>引入CDN，将直播流分发至边缘节点，降低接入延迟</li><li>使用Nginx负载均衡 + 微服务架构，支持水平扩展</li></ul></li><li>该问题反映可修改性不足。可通过： <ul><li>Docker容器化服务</li><li>Kubernetes实现自动扩缩容</li><li>Jenkins构建CI/CD流水线，实现一键部署</li></ul></li></ol><table tabindex="0"><thead><tr><th>质量属性</th><th>判断关键词</th><th>典型优化方案</th></tr></thead><tbody><tr><td>性能</td><td>响应慢、延迟高、CPU高</td><td>缓存、异步、CDN、负载均衡</td></tr><tr><td>可用性</td><td>崩溃、卡顿、不可用</td><td>主从、集群、熔断、降级</td></tr><tr><td>可修改性</td><td>手动配置、发布慢</td><td>容器化、CI/CD、IaC</td></tr><tr><td>安全性</td><td>被攻击、数据泄露</td><td>防火墙、JWT、权限控制</td></tr><tr><td>可测试性</td><td>难以自动化测试</td><td>单元测试、Mock、微服务拆分</td></tr><tr><td>可伸缩性</td><td>无法扩容、并发低</td><td>水平扩展、K8s、消息队列</td></tr></tbody></table>',4)),t(s),a[4]||(a[4]=l('<h3 id="atam-安全架构设计" tabindex="-1">ATAM + 安全架构设计 <a class="header-anchor" href="#atam-安全架构设计" aria-label="Permalink to &quot;ATAM + 安全架构设计&quot;">​</a></h3><blockquote><p>某金融公司正在设计新一代移动支付平台，要求支持高并发、高安全、快速迭代。架构团队提出了基于微服务 + API网关 + OAuth2认证的架构方案。</p><p>在ATAM评估会议中，利益相关者提出了以下质量属性场景：</p><ul><li>在双十一大促期间，系统应能支持每秒处理5万笔交易，平均响应时间不超过 200ms</li><li>即使某省数据中心发生故障，系统仍应继续提供服务，允许用户完成支付</li><li>第三方应用接入支付接口时，必须通过身份认证和权限审批，防止未授权访问</li><li>当订单服务不可用时，前端应能返回缓存结果或友好提示，避免页面崩溃</li></ul><p>架构师初步设计如下：</p><ul><li>使用 Spring Cloud 微服务架构</li><li>API网关统一入口，集成限流、鉴权</li><li>用户认证采用 OAuth2 + JWT</li><li>Redis 缓存热点数据</li><li>数据库主从复制 + 读写分离</li><li>部署在两地三中心云环境</li></ul><p>回答以下问题</p><ul><li>请将上述 4 个质量属性场景，分别对应到具体的质量属性（8分）</li><li>针对场景3（第三方接入安全），请说明 OAuth2 的核心角色有哪些？并简述其在本系统中的工作流程。（6分）</li><li>在ATAM评估中，常需识别风险点、敏感点和权衡点。请从上述架构中各举一例。（6分）</li><li>场景4体现了哪种设计思想？请说明 Redis 缓存在此场景中的作用与可能风险。（5分）</li></ul></blockquote><ul><li>性能、可用性、安全性、可用性</li><li>OAuth2 的核心角色有： <ul><li>资源所有者：客户或终端用户</li><li>客户端：app或者网页</li><li>授权服务器：负责验证客户身份，发放访问令牌</li><li>资源服务器：负责处理资源请求，返回结果</li></ul></li><li>工作流程： <ul><li>第三方应用引导用户跳转到授权服务器登录</li><li>用户同意授权后，授权服务器返回授权码</li><li>第三方应用用授权码向授权服务器换取访问令牌（Access Token）</li><li>第三方应用携带 Token 访问资源服务器（支付接口），资源服务器校验 Token 合法性后返回结果</li></ul></li><li>风险点： <ul><li>若 Redis 缓存宕机，未设计降级策略，可能导致数据库雪崩</li><li>已知隐患，可能引发系统崩溃</li></ul></li><li>敏感点： <ul><li>API网关的限流阈值设置，直接影响系统性能和可用性</li><li>小调整可能大幅影响质量属性</li></ul></li><li>权衡点： <ul><li>启用 JWT 可提升性能（无状态），但一旦签发无法主动撤销，影响安全性</li><li>提升性能，牺牲部分安全控制</li></ul></li><li>设计思想：容错设计 或 降级策略</li><li>Redis 缓存的作用： <ul><li>提供兜底数据，保证用户仍能看到历史订单或提示信息</li><li>减轻后端服务压力，防止故障扩散</li></ul></li><li>可能风险： <ul><li>缓存雪崩：大量缓存同时失效，请求压向数据库</li><li>缓存穿透：恶意查询不存在的数据，绕过缓存</li><li>数据不一致：缓存与数据库不同步</li></ul></li></ul>',3))])}const T=n(m,[["render",o]]);export{_ as __pageData,T as default};
