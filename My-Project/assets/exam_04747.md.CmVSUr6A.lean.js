import{_ as n,E as s,c as r,m as l,a as e,J as t,w as a,aS as o,o as _}from"./chunks/framework.Dn4syfiR.js";const Z=JSON.parse('{"title":"04747 Java语言程序设计","description":"","frontmatter":{},"headers":[],"relativePath":"exam/04747.md","filePath":"exam/04747.md","lastUpdated":1733644724000}'),u={name:"exam/04747.md"},d=o("",6),c=l("li",null,"调用方法使用值传递的方式，形参和实参指向同一地址",-1),h=l("li",null,"一个类中允许多个方法使用同一个方法名：方法重载",-1),f=l("li",null,"类方法不能直接引用实例变量",-1),F=l("li",null,"java 的派生机制，子类和父类之间是 is a 的关系，而不是 has a 的关系",-1),m=l("li",null,"调用方法使用值传递将基本数据类型的实参传给形参是将实参的值复制给形参",-1),A=l("li",null,"直接定义在类的变量：实例变量、定义在类并且通过 static 修饰是类变量、方法内的变量都是局部变量",-1),P=l("h2",{id:"集合",tabindex:"-1"},[e("集合 "),l("a",{class:"header-anchor",href:"#集合","aria-label":'Permalink to "集合"'},"​")],-1),p=l("h2",{id:"io流",tabindex:"-1"},[e("IO流 "),l("a",{class:"header-anchor",href:"#io流","aria-label":'Permalink to "IO流"'},"​")],-1),T=l("li",null,"File 对象只能用来命名文件、查询文件属性和处理目录，不提供读写操作",-1),y=l("li",null,"程序需按行输入输出文件的字符流：需要使用缓冲式 BufferedReader、BufferedWriter",-1),b=l("li",null,"大多数采用缓冲式输入数据文件的主要目的：用 readLine()方法按行输入字符",-1),C=l("li",null,"new File()再通过 getpath 得到的路径 \\my\\git\\a.java（反斜杠、不带磁盘名称）",-1),g=l("li",null,"不能用于文件随机访问 readInteger（readChar、readLong、writeChars）",-1),D=l("li",null,"int read(byte []b, int off, int len)的返回值是读取的字节数",-1),I=l("li",null,"一次从文件中读一行数据使用 BufferedReader 的 readLine()方法",-1),S=l("h2",{id:"异常处理",tabindex:"-1"},[e("异常处理 "),l("a",{class:"header-anchor",href:"#异常处理","aria-label":'Permalink to "异常处理"'},"​")],-1),x=l("li",null,"受检异常包括：IO、SQL、ClassNotFound、FileNotFound、NoSuchMethod",-1),J=l("li",null,"运行时异常：NullPoint、ClassCase（类强制转换）、IndexOutOfBounds、Arithmetic（数字运算）",-1),N=l("h2",{id:"多线程",tabindex:"-1"},[e("多线程 "),l("a",{class:"header-anchor",href:"#多线程","aria-label":'Permalink to "多线程"'},"​")],-1),O=l("li",null,"从阻塞状态->就绪状态 ：自动恢复 、resume()、notify 或 notifyAll 通知恢复",-1),R=l("li",null,"Thread 中 3 个线程优先级静态量 NORM_PRIOPLTY、 MAX_PRIOPLTY、 MIN_PRIOPLTY（普通、最大、最小）",-1),L=l("li",null,"Runnable：先实现接口。在类内实现run()方法；并在类内声明线程对象，在init()，方法或start()方法中创建新线程，并在start() 方法中启动新线程",-1),k=l("li",null,"线程死亡的原因：执行完毕、遇到异常",-1),v=l("li",null,"线程的组成部分（执行的代码、处理的数据、虚拟 CPU）不属于（入口和出口）",-1),V=o("",5),q=o("",12),w=l("ul",null,[l("li",null,"mousePressed"),l("li",null,"mouseReleased"),l("li",null,"mouseEntered"),l("li",null,"mouseExited"),l("li",null,"mouseClicked")],-1),E=l("li",null,"顶层容器：JFream、JApplet、JDialog、JWindow",-1),B=l("li",null,"文字字型三要素：字体、风格、字号",-1),j=l("li",null,"创建文字的构造 Font(string name, int style, int size) 宋体 加粗 12",-1),M=l("li",null,"java.awt.event 包包含：源对象、监视器对象、事件对象",-1),U=l("ul",null,[l("li",null,"getSelectedFile 获取文件对象（顺序就是这三个的排序，先获得文件对象）"),l("li",null,"getName 获取文件名称"),l("li",null,"getPath 路径")],-1),G=o("",3);function W($,z,H,Y,Q,X){const i=s("font");return _(),r("div",null,[d,l("ul",null,[l("li",null,[e("包装类不能被实例化的 "),t(i,{style:{color:"#DF2A3F"}},{default:a(()=>[e("Void")]),_:1}),e("（不能通过new 创建）")]),c,h,f,F,m,A,l("li",null,[e("多态是父类定义的属性和方法被子类继承之后可以具有不同的数据类型或表现出不同的行为。"),t(i,{style:{color:"#DF2A3F"}},{default:a(()=>[e(" 指对象的状态随运行时给定的参数不同而不同（x）")]),_:1})]),l("li",null,[e("面向对象语言概念：抽象、对象、消息、类、继承、多态、动态联编。"),t(i,{style:{color:"#DF2A3F"}},{default:a(()=>[e("函数、模块不属于")]),_:1})]),l("li",null,[e("子类调用父类构造的方法："),t(i,{style:{color:"#DF2A3F"}},{default:a(()=>[e("super和创建子类对象会自动调用父类构造")]),_:1})])]),P,l("ul",null,[l("li",null,[e("Vector类实例当中存的是"),t(i,{style:{color:"#DF2A3F"}},{default:a(()=>[e("对象")]),_:1}),e("类型")])]),p,l("ul",null,[l("li",null,[e("File对象通过"),t(i,{style:{color:"#DF2A3F"}},{default:a(()=>[e("length()")]),_:1}),e("方法获取文件长度")]),T,y,b,l("li",null,[e("抽象类 Reader、Writer 处理的是"),t(i,{style:{color:"#DF2A3F"}},{default:a(()=>[e("字符流")]),_:1}),e("（带了 Stream 的才是字节流）")]),C,g,D,I,l("li",null,[e("IO 包的四个基本抽象类："),t(i,{style:{color:"#DF2A3F"}},{default:a(()=>[e("InputStream、OutputStream、Reader、Writer")]),_:1})])]),S,l("ul",null,[l("li",null,[e("在java当中必须处理的异常 "),t(i,{style:{color:"#DF2A3F"}},{default:a(()=>[e("受检异常")]),_:1})]),x,J]),N,l("ul",null,[l("li",null,[e("由挂起状态->可运行状态的方法 "),t(i,{style:{color:"#DF2A3F"}},{default:a(()=>[e("notify()")]),_:1})]),O,l("li",null,[e("强制终止线程的方法"),t(i,{style:{color:"#DF2A3F"}},{default:a(()=>[e(" yield()")]),_:1})]),l("li",null,[e("对象互斥锁 是对"),t(i,{style:{color:"#DF2A3F"}},{default:a(()=>[e("共享数据")]),_:1}),e("的操作 "),t(i,{style:{color:"#DF2A3F"}},{default:a(()=>[e("synchronized")]),_:1})]),l("li",null,[e("线程优先级级别最低的数字 "),t(i,{style:{color:"#DF2A3F"}},{default:a(()=>[e("1")]),_:1})]),R,L,k,v]),V,l("ul",null,[l("li",null,[e("JComboBox 构造："),t(i,{style:{color:"#DF2A3F"}},{default:a(()=>[e("无参构造、有参构造")]),_:1}),e("（Object [] items）创建可选组合框")]),l("li",null,[e("创建自定义图形，由 JPanel 派生一个新类，重写父类 "),t(i,{style:{color:"#DF2A3F"}},{default:a(()=>[e("paintComponent()")]),_:1}),e(" 方法")]),q,l("li",null,[e("MouseListener 接口只能处理的鼠标事件：按下、释放、点击、进入、退出（"),t(i,{style:{color:"#DF2A3F"}},{default:a(()=>[e("没有移动事件")]),_:1}),e("） "),w]),E,B,j,M,l("li",null,[e("JFileChoose 来实现打开和保存文件对话框，用户通过文件对话框不能"),t(i,{style:{color:"#DF2A3F"}},{default:a(()=>[e("获取文件内容")]),_:1}),U]),G])])}const ll=n(u,[["render",W]]);export{Z as __pageData,ll as default};
