import{_ as s,c as a,o as l,aP as e}from"./chunks/framework.BJOOWd-7.js";const c=JSON.parse('{"title":"vue2","description":"","frontmatter":{},"headers":[],"relativePath":"frontEnd/vue/vue2.md","filePath":"frontEnd/vue/vue2.md","lastUpdated":1756720030000}'),n={name:"frontEnd/vue/vue2.md"};function t(p,i,h,r,d,o){return l(),a("div",null,i[0]||(i[0]=[e(`<h1 id="vue2" tabindex="-1">vue2 <a class="header-anchor" href="#vue2" aria-label="Permalink to &quot;vue2&quot;">​</a></h1><h2 id="v-if和v-show" tabindex="-1">v-if和v-show <a class="header-anchor" href="#v-if和v-show" aria-label="Permalink to &quot;v-if和v-show&quot;">​</a></h2><ul><li>v-if是条件渲染，</li><li>v-show是显示与隐藏</li></ul><h2 id="如何理解mvvm" tabindex="-1">如何理解MVVM <a class="header-anchor" href="#如何理解mvvm" aria-label="Permalink to &quot;如何理解MVVM&quot;">​</a></h2><ul><li>M：模型，对应的就是data的数据</li><li>V：视图，用户界面，DOM</li><li>VM：视图模型：Vue的实例对象，连接View和Model的桥梁</li></ul><p>核心是提供对View和ViewModel的双向数据绑定，当数据改变的时候，ViewModel能监听到数据的变化，自动更新视图，当用户操作视图的时候，ViewModel也可以监听到视图的变化，然后通知数据进行改动，这就实现了双向数据绑定</p><p>ViewModel通过双向绑定把View和Model连接起来，他们之间的同步是自动的，不需要认为干涉，所以我们只需要关注业务逻辑即可，不需要操作DOM，同时也不需要关注数据的状态问题，因为她是由MVVM统一管理</p><h2 id="v-for中的key值的作用是什么" tabindex="-1">v-for中的key值的作用是什么？ <a class="header-anchor" href="#v-for中的key值的作用是什么" aria-label="Permalink to &quot;v-for中的key值的作用是什么？&quot;">​</a></h2><p>key属性是DOM元素的唯一标识</p><ul><li>提高虚拟DOM的更新</li><li>若不设置key，可能会触发一些bug</li><li>为了触发过度效果</li></ul><h2 id="vue的生命周期" tabindex="-1">vue的生命周期 <a class="header-anchor" href="#vue的生命周期" aria-label="Permalink to &quot;vue的生命周期&quot;">​</a></h2><p>创建</p><ul><li>beforeCreat 在这个阶段属性和方法都不能使用</li><li>created 这里时实例创建完成之后，在这里完成了数据监测，可以使用数据，修改数据，不会触发updated，也不会更新视图</li></ul><p>挂载</p><ul><li>beforeMount 完成了模板的编译，虚拟DOM也完成创建，即将渲染，修改数据，不会触发updated</li><li>Mounted 把编译好的模板挂载到页面，这里可以发送异步请求也可以访问DOM节点</li></ul><p>更新</p><ul><li>beforeUpdate 组件数据更新之前使用，数据是新的，页面上的数据时旧的，组件即将更新，准备渲染，可以改数据</li><li>updated render重新做了渲染，这时数据和页面都是新的，避免在此更新数据</li></ul><p>销毁</p><ul><li>beforeDestroy 实例销毁前，在这里实例还可以用，可以清楚定时器等等</li><li>destroyed 组件已经被销毁了，全部都销毁</li></ul><p>使用了keep-alive时多出两个周期：</p><ul><li><code>activited</code> 组件激活时</li><li><code>deactivited</code> 组件被销毁时</li></ul><h2 id="在created和mounted去请求数据-有什么区别" tabindex="-1">在created和mounted去请求数据，有什么区别？ <a class="header-anchor" href="#在created和mounted去请求数据-有什么区别" aria-label="Permalink to &quot;在created和mounted去请求数据，有什么区别？&quot;">​</a></h2><ul><li>created：在渲染前调用，通常先初始化属性，然后做渲染</li><li>mounted：在模板渲染完成后，一般都是初始化页面后，在对元素节点进行操作</li></ul><p>在这里请求数据可能会出现闪屏的问题，created里不会，一般用created比较多</p><ul><li>请求的数据对DOM有影响，那么使用created</li><li>如果请求的数据对DOM无关，可以放在mounted</li></ul><h2 id="vue中的修饰符有哪些" tabindex="-1">vue中的修饰符有哪些？ <a class="header-anchor" href="#vue中的修饰符有哪些" aria-label="Permalink to &quot;vue中的修饰符有哪些？&quot;">​</a></h2><ol><li>事件修饰符 <ul><li>.stop 组织冒泡</li><li>.prevent 组织默认行为</li><li>.capture 内部元素触发的事件先在次处理</li><li>.self 只有在event.target是当前元素时触发</li><li>.once 事件只会触发一次</li><li>.passive 立即触发默认行为</li><li>.native 把当前元素作为原生标签看待</li></ul></li><li>按键修饰符 <ul><li>.keyup 键盘抬起</li><li>.keydown 键盘按下</li></ul></li><li>系统修饰符 <ul><li>.ctrl</li><li>.alt</li><li>.meta</li></ul></li><li>鼠标修饰符 <ul><li>.left 鼠标左键</li><li>.right 鼠标右键</li><li>.middle 鼠标中键</li></ul></li><li>表单修饰符 <ul><li>.lazy 等输入完之后再显示</li><li>.trim 删除内容前后的空格</li><li>.number 输入是数字或转为数字</li></ul></li></ol><p>##vue如何进行组件通信？</p><ol><li>父传子 <ul><li>props 父组件使用自定义属性，然后子组件使用props</li><li><code>$ref</code> 引用信息会注册在父组件的$refs对象上</li></ul></li><li>子传父 <ul><li><code>$emit</code> 子组件绑定自定义事件，触发执行后，传给父组件，父组件需要用事件监听来接收参数</li></ul></li><li>兄弟传 <ul><li>new一个新的vue实例，用on和emit来对数据进行传输</li></ul></li><li>vuex传值</li></ol><h2 id="keep-alive" tabindex="-1">keep-alive <a class="header-anchor" href="#keep-alive" aria-label="Permalink to &quot;keep-alive&quot;">​</a></h2><p>Vue的一个内置组件，包裹组件的时候，会缓存不活跃的组件实例，并不是销毁他们</p><p>作用：把组件切换的状态保存在内存里，防止重复渲染DOM节点，减少加载时间和性能消耗，提高用户体验</p><h2 id="axios是怎么做封装的" tabindex="-1">axios是怎么做封装的 <a class="header-anchor" href="#axios是怎么做封装的" aria-label="Permalink to &quot;axios是怎么做封装的&quot;">​</a></h2><ul><li>下载</li><li>创建实例</li><li>接着封装请求响应拦截器</li><li>抛出</li><li>最后封装接口</li></ul><h2 id="vue路由时怎么传参的" tabindex="-1">vue路由时怎么传参的？ <a class="header-anchor" href="#vue路由时怎么传参的" aria-label="Permalink to &quot;vue路由时怎么传参的？&quot;">​</a></h2><ul><li>params传参</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, params: {id: item.id}})</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$route.params.id</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>路由属性传参</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/index/\${item.id}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>路由配置 <code>{ path:&#39;/index:id&#39; }</code></p></li><li><p>query传参（可以解决页面刷新参数丢失的问题）</p></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  query: {id: item.id}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="vue路由的hash模式和history模式的区别" tabindex="-1">vue路由的hash模式和history模式的区别 <a class="header-anchor" href="#vue路由的hash模式和history模式的区别" aria-label="Permalink to &quot;vue路由的hash模式和history模式的区别&quot;">​</a></h2><ol><li>hash的路由地址上有#号，history模式没有</li><li>在做回车刷新的时候，hash模式会加载对应页面，history会报错404</li><li>hash模式支持低版本浏览器，history不支持，因为是H5新增的API</li><li>hash不会重新加载页面，单页面应用必备</li><li>history有历史记录，H5新增了pushState和replaceState()去修改历史记录，并不会立刻发送请求</li><li>history需要后台配置</li></ol><h2 id="路由拦截是怎么实现" tabindex="-1">路由拦截是怎么实现 <a class="header-anchor" href="#路由拦截是怎么实现" aria-label="Permalink to &quot;路由拦截是怎么实现&quot;">​</a></h2><p>需要在路由配置中添加一个字段，它是用于判断路由是否需要拦截</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  name: &#39;index&#39;,</span></span>
<span class="line"><span>  path: &#39;/index&#39;,</span></span>
<span class="line"><span>  component: Index,</span></span>
<span class="line"><span>  meta: {</span></span>
<span class="line"><span>    requirtAuth: true</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>而后给router添加一个beforeEach钩子函数，判断路由（token是否需要拦截）是否需要拦截</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">beforeEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (to.meta.requirtAuth) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (store.satte.token) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="vue的动态路由" tabindex="-1">vue的动态路由 <a class="header-anchor" href="#vue的动态路由" aria-label="Permalink to &quot;vue的动态路由&quot;">​</a></h2><ul><li>要在路由配置里设置meat属性，扩展权限相关的字段，在路由导航守卫里通过判断这个权限标识，实现路由的动态增加和跳转</li><li>根据用户登录的账号，返回用户角色</li><li>前端再根据角色，跟路由表的meta.role进行匹配</li><li>把匹配搭配的路由形成可访问的路由</li></ul><h2 id="如何解决刷新后二次加载路由" tabindex="-1">如何解决刷新后二次加载路由 <a class="header-anchor" href="#如何解决刷新后二次加载路由" aria-label="Permalink to &quot;如何解决刷新后二次加载路由&quot;">​</a></h2><ul><li><code>window.location.reload()</code></li><li>matcher</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resetRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> newRouter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creatRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  router.matcher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newRouter.matcher</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="vuex刷新页面数据丢失" tabindex="-1">vuex刷新页面数据丢失 <a class="header-anchor" href="#vuex刷新页面数据丢失" aria-label="Permalink to &quot;vuex刷新页面数据丢失&quot;">​</a></h2><ul><li>把数据直接保存在浏览器缓存里（cookie localstorage sessionStorage）</li><li>页面刷新的时候，再次请求数据，达到可以动态更新的方法 <ul><li>监听浏览器的刷新数据，在刷新前把数据保存到sessionStorage里，刷新后请求数据，请求到了用vuex，如果没有那就用sessionStorage里的数据</li></ul></li></ul><h2 id="computed和watch的区别" tabindex="-1">computed和watch的区别 <a class="header-anchor" href="#computed和watch的区别" aria-label="Permalink to &quot;computed和watch的区别&quot;">​</a></h2><ul><li>computed是计算属性，watch是监听，监听的是data中数据的变化</li><li>computed是支持缓存，依赖的属性值发生变化，计算属性才会重新计算，否则用缓存；watch不支持缓存</li><li>computed不支持异步，watch是可以异步操作</li><li>computed是第一次加载就监听，watch是不监听</li><li>computed函数中必须有return watch不用</li></ul><h2 id="vuex属性有哪些" tabindex="-1">vuex属性有哪些 <a class="header-anchor" href="#vuex属性有哪些" aria-label="Permalink to &quot;vuex属性有哪些&quot;">​</a></h2><ul><li><code>state</code> 存储变量</li><li><code>getters</code> state的计算属性</li><li><code>mutations</code> 提交更新数据的方法</li><li><code>actions</code> 和mutations差不多，他是提交mutations来修改数据，可以包括异步操作</li><li><code>modules</code> 模块化vuex</li></ul><h2 id="vue的双向数据绑定原理" tabindex="-1">vue的双向数据绑定原理 <a class="header-anchor" href="#vue的双向数据绑定原理" aria-label="Permalink to &quot;vue的双向数据绑定原理&quot;">​</a></h2><p>通过数据劫持和发布订阅者模式来实现，同时利用<code>Object.defineProperty()</code>劫持各个属性的<code>getter</code>和<code>setter</code></p><p>在数据发生改变的时候发布消息给订阅者，触发对应的监听回调渲染视图，也就是说数据和视图时同步的，数据发生改变，视图跟着发生改变，视图改变，数据也会发生改变。</p><ul><li><p>需要<code>observer</code>的数据对象进行递归遍历，包括子属性对象的属性，都加上<code>setter</code>和<code>getter</code></p></li><li><p><code>compile</code>模板解析指令，把模板中的变量替换成数据，然后初始化渲染视图，同时把每个指令对应的节点绑定上更新函数，添加订阅者，如果数据变化，收到通知，更新视图</p></li><li><p><code>Watcher</code>订阅者是<code>Observer</code>和<code>Compile</code>之间的通信桥梁。主要是用来做：</p><ol><li>在自身实例化的时候忘订阅器内添加自己</li><li>自身要有一个<code>update()</code>方法</li><li>等待属性变动时，调用自身的<code>update()</code>方法，触发<code>compile</code>这种的回调</li></ol></li><li><p>MVVM模式作为数据绑定的入口，整合了<code>observer</code>、<code>compile</code>和<code>watcher</code>三者， 通过<code>observer</code>来监听自己的数据变化，通过<code>compile</code>解析模板指令，最后利用<code>watcher</code>把<code>observer</code>和<code>compile</code>联系起来， 最终达到数据更新视图更新，视图更新数据更新的效果</p></li></ul><h2 id="diff算法和虚拟dom" tabindex="-1">diff算法和虚拟DOM <a class="header-anchor" href="#diff算法和虚拟dom" aria-label="Permalink to &quot;diff算法和虚拟DOM&quot;">​</a></h2><ul><li>虚拟DOM，描述元素和元素之间的关系，创建一个JS对象 如果组件内有响应的数据，数据发生改变的时候，render函数会生成一个新的虚拟DOM，这个新的虚拟DOM会和旧的虚拟DOM进行比对，找到需要修改的虚拟DOM内容，然后去对应的真实DOM中修改</li><li>diff算法就是虚拟DOM的比对时用的，返回一个patch对象，这个对象的作用就是存储两个节点不同的地方，最后用patch里记录的信息进行更新真实DOM <ul><li>JS对象表示真实的DOM结构，要生成一个虚拟DOM，再用虚拟DOM构建一个真实DOM树，渲染到页面</li><li>状态改变生成新的虚拟DOM，跟就得虚拟DOM进行比对，这个比对的过程就是DIFF算法，利用patch记录差异</li><li>把记录的差异用在第一个虚拟DOM生成的真实DOM上，视图就更新了。</li></ul></li></ul><h2 id="vue和jq的区别" tabindex="-1">vue和jq的区别 <a class="header-anchor" href="#vue和jq的区别" aria-label="Permalink to &quot;vue和jq的区别&quot;">​</a></h2><ul><li>原理不同 vue就是数据绑定；jq是先获取dom再处理</li><li>着重点不同 vue是数据驱动，jq是着重于页面</li><li>操作不同</li><li>未来发展不同</li></ul><h2 id="如何封装一个组件" tabindex="-1">如何封装一个组件 <a class="header-anchor" href="#如何封装一个组件" aria-label="Permalink to &quot;如何封装一个组件&quot;">​</a></h2><ul><li>使用<code>Vue.extend()</code>创建一个组件</li><li>使用<code>Vue.components()</code>方法注册组件</li><li>如果子组件需要数据，可以在<code>props</code>中接收定义</li><li>子组件修改好数据，要把数据传递给父组件，可以用<code>emit()</code>方法</li></ul><h2 id="封装一个可复用的组件-需要满足什么条件" tabindex="-1">封装一个可复用的组件，需要满足什么条件 <a class="header-anchor" href="#封装一个可复用的组件-需要满足什么条件" aria-label="Permalink to &quot;封装一个可复用的组件，需要满足什么条件&quot;">​</a></h2><ul><li>低耦合，组件之间的依赖越小越好</li><li>最好从父级传入信息，不要在公共组件中请求数据</li><li>传入的数据要进行校验</li><li>处理事件的方法写在父组件中</li></ul><h2 id="vue的过滤器" tabindex="-1">vue的过滤器 <a class="header-anchor" href="#vue的过滤器" aria-label="Permalink to &quot;vue的过滤器&quot;">​</a></h2><ul><li>全局过滤器</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;add&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>本地过滤器：和methods同级</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>filter:{</span></span>
<span class="line"><span>   add:function(v){</span></span>
<span class="line"><span>      return v &lt; 10 ? &#39;0&#39; + v : v</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在模板中使用</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{33 | add}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="vue强制刷新" tabindex="-1">vue强制刷新 <a class="header-anchor" href="#vue强制刷新" aria-label="Permalink to &quot;vue强制刷新&quot;">​</a></h2><ul><li><code>location.reload()</code></li><li><code>this.$router.go(0)</code></li><li><code>provide和inject</code></li></ul><h2 id="vue的性能优化" tabindex="-1">vue的性能优化 <a class="header-anchor" href="#vue的性能优化" aria-label="Permalink to &quot;vue的性能优化&quot;">​</a></h2><ol><li>编码优化 <ul><li>不要把所有数据都放在data中</li><li>v-for时给每个元素绑定事件用事件代理</li><li>keep-alive缓存组件</li><li>尽可能拆分组件，提高复用性、维护性</li><li>key值要保证唯一</li><li>合理使用路由懒加载，异步组件</li><li>数据持久化存储的使用尽量用防抖、节流优化</li></ul></li><li>加载优化 <ul><li>按需加载</li><li>内容懒加载</li><li>图片懒加载</li></ul></li><li>用户体验 <ul><li>骨架屏</li></ul></li><li>SEO优化 <ul><li>预渲染</li><li>服务端渲染ssr</li></ul></li><li>打包优化 <ul><li>CDN形式加载第三方模块</li><li>多线程打包</li><li>抽离公共文件</li></ul></li><li>缓存和压缩 <ul><li>客户端缓存、服务端缓存</li><li>服务端Gzip压缩</li></ul></li></ol><h2 id="首屏优化" tabindex="-1">首屏优化 <a class="header-anchor" href="#首屏优化" aria-label="Permalink to &quot;首屏优化&quot;">​</a></h2><ul><li>使用路由懒加载</li><li>非首屏组件使用异步组件</li><li>首屏不重要的组件延迟加载</li><li>静态资源放在CDN上</li><li>减少首屏上JS、CSS等资源文件的大小</li><li>使用服务端渲染</li><li>尽量减少DOM的数量和层级</li><li>使用精灵图请求</li><li>做一些loading</li><li>开启Gzip压缩</li><li>图片懒加载</li></ul>`,84)]))}const k=s(n,[["render",t]]);export{c as __pageData,k as default};
