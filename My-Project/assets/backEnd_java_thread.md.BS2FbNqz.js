import{_ as s,c as i,o as n,aP as l}from"./chunks/framework.BJOOWd-7.js";const c=JSON.parse('{"title":"线程并发","description":"","frontmatter":{},"headers":[],"relativePath":"backEnd/java/thread.md","filePath":"backEnd/java/thread.md","lastUpdated":1749030379000}'),e={name:"backEnd/java/thread.md"};function t(h,a,r,p,k,d){return n(),i("div",null,a[0]||(a[0]=[l(`<h1 id="线程并发" tabindex="-1">线程并发 <a class="header-anchor" href="#线程并发" aria-label="Permalink to &quot;线程并发&quot;">​</a></h1><h2 id="线程安全" tabindex="-1">线程安全 <a class="header-anchor" href="#线程安全" aria-label="Permalink to &quot;线程安全&quot;">​</a></h2><p>线程安全指的是，我们写的某段代码，在多个线程同时执行这段代码时，不会产生混乱，依然能够得到正常的结果，比如i++，初始化值为0，那么两个线程来同时执行这行代码，如果代码是线程安全的，那么最终的结果应该就是一个线程的结果为1， 一个线程的结果为2，如果出现了两个线程的结果都为1，则表示这段代码是线程不安全的。所以线程安全，主要指的是一段代码在多个线程同时执行的情况下，能否得到正确的结果。</p><h2 id="守护线程" tabindex="-1">守护线程 <a class="header-anchor" href="#守护线程" aria-label="Permalink to &quot;守护线程&quot;">​</a></h2><p>线程分为用户线程和守护线程，M的后台线程，比如垃圾回收线程就是守护线程， 守护线程会在其他普通线程都停止运行之后自动关闭。我们可以通过设置<code>thread.setDaemon(true)</code>来把一个线程设置为守护线程。</p><h2 id="并发-并行-串行" tabindex="-1">并发 &amp; 并行 &amp; 串行 <a class="header-anchor" href="#并发-并行-串行" aria-label="Permalink to &quot;并发 &amp; 并行 &amp; 串行&quot;">​</a></h2><ul><li>串行在时间上不可能发生重叠，前一个任务没搞定，下一个任务就只能等着</li><li>并行在时间上是重叠的，两个任务在同一时刻互不干扰的同时执行</li><li>并发允许两个任务彼此干扰。统一时间点、只有一个任务运行，交替执行</li></ul><h2 id="创建线程的方式" tabindex="-1">创建线程的方式 <a class="header-anchor" href="#创建线程的方式" aria-label="Permalink to &quot;创建线程的方式&quot;">​</a></h2><ul><li>继承Thread类</li><li>实现Runnable接口</li><li>实现Callable接口</li><li>线程池</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.ExecutorService;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.Executors;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Test</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ExecutorService executorService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newFixedThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        executorService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="为什么不建议使用executors创建线程池" tabindex="-1">为什么不建议使用Executors创建线程池 <a class="header-anchor" href="#为什么不建议使用executors创建线程池" aria-label="Permalink to &quot;为什么不建议使用Executors创建线程池&quot;">​</a></h2><ul><li>FixedThreadPool</li><li>SingleThreadExecutor</li></ul><p>在这里可以看一下newFixedThreadPool的源码</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ExecutorService </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newFixedThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nThreads) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ThreadPoolExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nThreads, nThreads,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                  0L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TimeUnit.MILLISECONDS,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                  new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LinkedBlockingQueue&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>发现创建的队列为LinkedBlockingQueue，是一个无界阻塞队列，如果使用该线程池执行任务如果任务过多就会不断的添加到队列中，任务越多占用的内存就越多，最终可能耗尽内存，导致oom. 并且使用Executors来创建线程池也不能自定义线程的名字， 不利于排查问题</p><h2 id="线程池有哪几种状态" tabindex="-1">线程池有哪几种状态 <a class="header-anchor" href="#线程池有哪几种状态" aria-label="Permalink to &quot;线程池有哪几种状态&quot;">​</a></h2><ul><li>RUNNING 线程池正常运行，可以接受新任务</li><li>SHUTDOWN 线程池关闭，不能接受新任务，会把任务队列当中的任务执行完毕后关闭</li><li>STOP 线程池关闭，不能接受新任务，不会执行剩余任务</li><li>TIDING 线程池中没有线程在运行，会自动切换成该状态，并且会调用terminate()方法</li><li>TERMINATED terminated()方法执行后，进入该状态</li></ul><h2 id="线程池底层实现原理-队列-线程" tabindex="-1">线程池底层实现原理 （队列 + 线程） <a class="header-anchor" href="#线程池底层实现原理-队列-线程" aria-label="Permalink to &quot;线程池底层实现原理 （队列 + 线程）&quot;">​</a></h2><p>此时线程池的线程数用n表示</p><ul><li>n &lt; corePoolSize 时，即使线程池中线程都处于空闲状态，也会创建新的线程用来处理被添加的任务</li><li>n = corePoolSize 时，但缓冲队列workQueue没满，那么任务会添加到缓冲队列中</li><li>n &gt;= corePoolSize 时，缓冲队列满，并且n &lt; maximumPoolSize时，创建新的线程来处理任务</li><li>n &gt; corePoolSize 时，缓冲队列满，并且n = maximumPoolSize时，那么通过handler所指定的策略来处理任务</li><li>n &gt; corePoolSize 时，若某线程的超时时间 &gt; keepAliveTime时，线程将被终止，这样线程池可以动态调整池中的线程数</li></ul><h2 id="synchronized-reentrantlock" tabindex="-1">Synchronized &amp; ReentrantLock <a class="header-anchor" href="#synchronized-reentrantlock" aria-label="Permalink to &quot;Synchronized &amp; ReentrantLock&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Synchronized</th><th>ReentrantLock</th></tr></thead><tbody><tr><td>java当中的一个关键字</td><td>JDK1.5之后的API</td></tr><tr><td>自动加锁和释放锁</td><td>手动</td></tr><tr><td>JVM层面的锁</td><td>API层面</td></tr><tr><td>非公平锁</td><td>公平锁 &amp; 非公平锁</td></tr><tr><td>锁的是对象，锁信息存储在对象头里</td><td>int类型的state标识来标识锁的状态</td></tr><tr><td>底层有锁升级的过程</td><td>底层没有锁升级的过程</td></tr></tbody></table><h2 id="threadlocal" tabindex="-1">ThreadLocal <a class="header-anchor" href="#threadlocal" aria-label="Permalink to &quot;ThreadLocal&quot;">​</a></h2><ul><li>ThreadLocal是Java中所提供的线程本地存储机制，可以利用该机制将数据缓存在某个线程内部，该线程可以在任意时刻、任意方法中获取缓存的数据</li><li>ThreadLocal底层是通过ThreadLocalMap来实现的，每个Thread对象（注意不是ThreadLocal对象）中都存在一个ThreadLocalMap， Map的key为ThreadLocal对象，Map的value为需要缓存的值</li><li>造成内存泄露，在每一次使用之后调用remove方法请求数据</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ThreadLocal&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; local </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ThreadLocal&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        local.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> local.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        local.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="threadlocal-底层原理" tabindex="-1">ThreadLocal 底层原理 <a class="header-anchor" href="#threadlocal-底层原理" aria-label="Permalink to &quot;ThreadLocal 底层原理&quot;">​</a></h2><p>ThreadLocal底层是通过ThreadLocalMap来实现的，每个Thread对象（注意不是ThreadLocal对象）中都存在一个ThreadLocalMap，Map的key为ThreadLocal对象，Map的value为需要缓存的值</p><h2 id="reentrantlock的公平锁和非公平锁" tabindex="-1">ReentrantLock的公平锁和非公平锁 <a class="header-anchor" href="#reentrantlock的公平锁和非公平锁" aria-label="Permalink to &quot;ReentrantLock的公平锁和非公平锁&quot;">​</a></h2><ul><li>公平锁，会先检查AQS队列中是否存在线程在排队，如果有线程在排队，则当前线程也进行排队</li><li>非公平锁，则不会去检查是否有线程在排队，而是直接竞争锁</li></ul><p>不管是公平锁还是非公平锁，一旦没竞争到锁，都会进行排队，当锁释放时，都是唤醒排在最前面的线程，所以非公平锁只是体现在了线程加锁阶段，而没有体现在线程被唤醒阶段ReentrantLock是可重入锁，不管是公平锁还是非公平锁都是可重入的</p><h2 id="reentrantlock的-lock-trylock" tabindex="-1">ReentrantLock的 lock() &amp; tryLock() <a class="header-anchor" href="#reentrantlock的-lock-trylock" aria-label="Permalink to &quot;ReentrantLock的 lock() &amp; tryLock()&quot;">​</a></h2><ul><li>tryLock()表示尝试加锁，可能加到，也可能加不到，该方法不会阻塞线程，如果加到锁则返回true，没有加到则返回false</li><li>lock()表示阻塞加锁，线程会阻塞直到加到锁，方法也没有返回值</li></ul><h2 id="synchronized-锁升级过程" tabindex="-1">Synchronized 锁升级过程 <a class="header-anchor" href="#synchronized-锁升级过程" aria-label="Permalink to &quot;Synchronized 锁升级过程&quot;">​</a></h2><ul><li>偏向锁：在锁对象的对象头中记录一下当前获取到该锁的线程ID，该线程下次如果又来获取该锁就可以直接获取到了，也就是支持锁重入</li><li>轻量级锁：由偏向锁升级而来，当一个线程获取到锁后，此时这把锁是偏向锁，此时如果有第二个线程来竞争锁，偏向锁就会升级为轻量级锁，之所以叫轻量级锁，是为了和重量级锁区分开来，轻量级锁底层是通过自旋来实现的，并不会阻塞线程</li><li>如果自旋次数过多仍然没有获取到锁，则会升级为重量级锁，重量级锁会导致线程阻塞</li><li>自旋锁：自旋锁就是线程在获取锁的过程中，不会去阻塞线程，也就无所谓唤醒线程，阻塞和唤醒这两个步骤都是需要操作系统去进行的，比较消耗时间，自旋锁是线程通过CAS获取预期的一个标记， 如果没有获取到，则继续循环获取，如果获取到了则表示获取到了锁，这个过程线程一直在运行中，相对而言没有使用太多的操作系统资源，比较轻量。</li></ul><h2 id="造成死锁的原因" tabindex="-1">造成死锁的原因 <a class="header-anchor" href="#造成死锁的原因" aria-label="Permalink to &quot;造成死锁的原因&quot;">​</a></h2><ul><li>一个资源每次只能被一个线程使用</li><li>一个线程在阻塞等待某个资源时，不释放已占有资源</li><li>一个线程已经获得的资源，在未使用完之前，不能被强行剥夺</li><li>若干线程形成头尾相接的循环等待资源关系</li></ul><p>需要注意：加锁顺序、加锁时限、死锁检查（提前预防）</p><h2 id="countdownlatch-semaphore" tabindex="-1">CountDownLatch &amp; Semaphore <a class="header-anchor" href="#countdownlatch-semaphore" aria-label="Permalink to &quot;CountDownLatch &amp; Semaphore&quot;">​</a></h2><h2 id="aqs-abstractqueuedsynchronizer" tabindex="-1">AQS （AbstractQueuedSynchronizer） <a class="header-anchor" href="#aqs-abstractqueuedsynchronizer" aria-label="Permalink to &quot;AQS （AbstractQueuedSynchronizer）&quot;">​</a></h2><ul><li>AQS是一个JAVA线程同步的框架。是JDK中很多锁工具的核心实现框架。</li><li>在AQS中，维护了一个信号量state和一个线程组成的双向链表队列。 <ul><li>线程队列，就是用来给线程排队的</li><li>state（红绿灯），用来控制线程排队或者放行的</li></ul></li><li>在做可重入锁场景下，state就用来表示加锁的次数。 <ul><li>无锁 0</li><li>加锁 state+1</li><li>释放锁 state-1</li></ul></li></ul>`,40)]))}const E=s(e,[["render",t]]);export{c as __pageData,E as default};
